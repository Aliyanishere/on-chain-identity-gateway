{
  "address": "0xbCE6a512D887aFc1eaF4Df7754BD13923e2A793F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "AdminTransfered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Blacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "BlacklistedBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "GatekeeperNetworkCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "TransfersAcceptedBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "TransfersRestrictedBatch",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "acceptTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "authorities",
          "type": "address[]"
        }
      ],
      "name": "addNetworkAuthorities",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "blacklistBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isDAOGoverned",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_daoExecutor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "createGatekeeperNetwork",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "authorities",
          "type": "address[]"
        }
      ],
      "name": "removeNetworkAuthorities",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "restrictTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7076f80dd4815b2c3295badc4c6a799975f54768d262cfc566b1c3b395d6d799",
  "receipt": {
    "to": null,
    "from": "0x9b4525aefEDA97b78559012ddA8163eF90B3dF21",
    "contractAddress": "0xbCE6a512D887aFc1eaF4Df7754BD13923e2A793F",
    "transactionIndex": 12,
    "gasUsed": "4222445",
    "logsBloom": "0x
    "blockHash": "0x2e809913bd9dd8777da481f5c8e1883e8a1a5410925eadd15df1d8101c5751db",
    "transactionHash": "0x7076f80dd4815b2c3295badc4c6a799975f54768d262cfc566b1c3b395d6d799",
    "logs": [],
    "blockNumber": 11026908,
    "cumulativeGasUsed": "7036889",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e324b527291b0e7915e8a7ddbdb7f46d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"BlacklistedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"GatekeeperNetworkCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TransfersAcceptedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TransfersRestrictedBatch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"acceptTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"authorities\",\"type\":\"address[]\"}],\"name\":\"addNetworkAuthorities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"blacklistBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isDAOGoverned\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_daoExecutor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"createGatekeeperNetwork\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"authorities\",\"type\":\"address[]\"}],\"name\":\"removeNetworkAuthorities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"restrictTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Gateway Token Controller contract is responsible for managing Identity.com KYC gateway token set of smart contracts Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body)  Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add new Network Authorities\",\"kind\":\"dev\",\"methods\":{\"acceptTransfersBatch(address[])\":{\"details\":\"Accepts owner's transfers for specified gateway tokens\",\"params\":{\"tokens\":\"Gateway Token contracts address array\"}},\"addNetworkAuthorities(address,address[])\":{\"details\":\"Triggers to add multiple network authorities in gateway token contract. \",\"params\":{\"authorities\":\"Network Authorities array\",\"token\":\"Gateway Token contract address\"}},\"blacklist(address)\":{\"details\":\"Blacklists specified `user` completely, user can't get KYC verification on any gateway token networks.\",\"params\":{\"user\":\"Address to blacklist.\"}},\"blacklistBatch(address[])\":{\"details\":\"Blacklist multiple `users`, user can't get KYC verification on any gateway token networks.\",\"params\":{\"users\":\"User addresses to blacklist.\"}},\"constructor\":{\"details\":\"Gateway Token Controller contract constructor.  Grants admin role to contract deployer\"},\"createGatekeeperNetwork(string,string,bool,address,address)\":{\"details\":\"Deploys new Gateway Token and save address at gatewayTokens address set.\",\"params\":{\"_name\":\"Gateway Token name\",\"_symbol\":\"Gateway Token symbol\"}},\"isBlacklisted(address)\":{\"details\":\"Checks if specified `user` blacklisted completely.  If user blacklisted gateway token clients not able to verify identity,  and gatekeepers have to burn tokens owned by blacklisted users.\",\"params\":{\"user\":\"Address to check.\"}},\"removeNetworkAuthorities(address,address[])\":{\"details\":\"Triggers to remove multiple network authorities in gateway token contract. \",\"params\":{\"authorities\":\"Network Authorities array\",\"token\":\"Gateway Token contract address\"}},\"restrictTransfersBatch(address[])\":{\"details\":\"Restricts owner's transfers for specified gateway tokens\",\"params\":{\"tokens\":\"Gateway Token contracts address array\"}},\"transferAdmin(address)\":{\"details\":\"Transfers Gateway Token system admin access in case Identity.com changes the main management address\",\"params\":{\"newAdmin\":\"Address to transfer admin role for.\"}}},\"stateVariables\":{\"identityAdmin\":{\"details\":\"Triggers to get Identity.com System Admin\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNetworkAuthorities(address,address[])\":{\"notice\":\"Only triggered by identityAdmin\"},\"blacklist(address)\":{\"notice\":\"Once user is blacklisted there is no way to whitelist, please use this function carefully.\"},\"blacklistBatch(address[])\":{\"notice\":\"Once user is blacklisted there is no way to whitelist, please use this function carefully.\"},\"removeNetworkAuthorities(address,address[])\":{\"notice\":\"Only triggered by identityAdmin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GatewayTokenController.sol\":\"GatewayTokenController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    address private _trustedForwarder;\\n\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ef3911dcb48e7ee88d217f4519e8d4bd3a705b941ffc6dbb006bbe557cd094d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/GatewayToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport \\\"./interfaces/IERC721Freezeble.sol\\\";\\nimport \\\"./interfaces/IGatewayToken.sol\\\";\\nimport \\\"./interfaces/IGatewayTokenController.sol\\\";\\nimport \\\"./interfaces/IERC721Expirable.sol\\\";\\n\\n\\n/**\\n * @dev Gateway Token contract is responsible for managing Identity.com KYC gateway tokens \\n * those tokens represent completed KYC with attached identity. \\n * Gateway tokens using ERC721 standard with custom extentions.\\n *\\n * Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body) \\n * Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add\\n * new Gatekeepers and Network Authorities\\n */\\ncontract GatewayToken is ERC2771Context, ERC165, AccessControl, IERC721, IERC721Metadata, IERC721Freezeble, IERC721Expirable, IGatewayToken {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Gateway Token name\\n    string public override name;\\n\\n    // Gateway Token symbol\\n    string public override symbol;\\n\\n    // Gateway Token controller contract address\\n    address public controller;\\n    address public deployer;\\n\\n    // Gateway token transfer restrictions\\n    bool public isTransfersRestricted;\\n\\n    // Off-chain DAO governance access control\\n    bool public override isDAOGoverned;\\n    address public override daoManager;\\n\\n    // Access control roles\\n    bytes32 public constant DAO_MANAGER_ROLE = keccak256(\\\"DAO_MANAGER_ROLE\\\");\\n    bytes32 public constant GATEKEEPER_ROLE = keccak256(\\\"GATEKEEPER_ROLE\\\");\\n    bytes32 public constant NETWORK_AUTHORITY_ROLE = keccak256(\\\"NETWORK_AUTHORITY_ROLE\\\");\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Mapping from token ID to freeze param\\n    mapping(uint256 => bool) private _isFreezed;\\n\\n    // Optional mapping for gateway token Identities (via TokenURI)\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    // Optional Mapping from token ID to expiration date\\n    mapping(uint256 => uint256) private _expirations;\\n\\n    // Optional Mapping from address to tokenID\\n    mapping(address => uint256) private _defaultTokens;\\n\\n    // @dev Modifier to prevent calls from anyone except Identity.com Admin\\n    modifier onlyIdentityAdmin() {\\n        require(msg.sender == IGatewayTokenController(controller).identityAdmin() || msg.sender == controller, \\\"NOT IDENTITY.COM ADMIN NOR TOKEN CONTROLLER\\\");\\n        _;\\n    }\\n\\n    // @dev Modifier to prevent calls for blacklisted users\\n    modifier onlyNonBlacklistedUser(address user) {\\n        require(!_isBlacklisted(user), \\\"BLACKLISTED USER\\\");\\n        _;\\n    }\\n\\n    // @dev Modifier to make a function callable only when token transfers not restricted.\\n    modifier whenTransfersNotRestricted() {\\n        require(!transfersRestricted(), \\\"TRANSFERS RESTRICTED\\\");\\n        _;\\n    }\\n\\n    // @dev Modifier to make a function callable only when token transfers restricted.\\n    modifier whenTransfersRestricted() {\\n        require(transfersRestricted(), \\\"TRANSFERS NOT RESTRICTED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Gateway Token constructor initializes the contract by \\n     * setting a `name` and a `symbol` to the gateway token.\\n     *\\n     * Initiates gateway token roles with main system admin `GATEWAY_TOKEN_CONTROLLER`,\\n     * `NETWORK_AUTHORITY_ROLE` responsible for adding/removing Gatekeepers and \\n     * `GATEKEEPER_ROLE` responsible for minting/burning/transfering tokens\\n     */\\n    constructor(string memory _name, string memory _symbol, address _deployer, bool _isDAOGoverned, address _daoManager, address trustedForwarder) ERC2771Context(trustedForwarder) public {\\n        name = _name;\\n        symbol = _symbol;\\n        controller = _msgSender();\\n        isTransfersRestricted = true;\\n        deployer = _deployer;\\n\\n        _setupRole(NETWORK_AUTHORITY_ROLE, _msgSender());\\n        _setupRole(NETWORK_AUTHORITY_ROLE, deployer);\\n        _setupRole(GATEKEEPER_ROLE, deployer);\\n\\n        if (_isDAOGoverned) {\\n            isDAOGoverned = _isDAOGoverned;\\n\\n            require(_daoManager != address(0), \\\"INCORRECT ADDRESS\\\");\\n            // require(_daoManager.isContract(), \\\"NON CONTRACT EXECUTOR\\\"); uncomment while testing with Gnosis Multisig\\n            daoManager = _daoManager;\\n\\n            _setupRole(DAO_MANAGER_ROLE, _daoManager);\\n            _setupRole(DAO_MANAGER_ROLE, _msgSender());\\n            _setupRole(NETWORK_AUTHORITY_ROLE, _daoManager);\\n            _setupRole(GATEKEEPER_ROLE, _daoManager);\\n            _setRoleAdmin(NETWORK_AUTHORITY_ROLE, DAO_MANAGER_ROLE);\\n            _setRoleAdmin(GATEKEEPER_ROLE, DAO_MANAGER_ROLE);\\n        } else {\\n            _setRoleAdmin(NETWORK_AUTHORITY_ROLE, NETWORK_AUTHORITY_ROLE);\\n            _setRoleAdmin(GATEKEEPER_ROLE, NETWORK_AUTHORITY_ROLE);\\n        }\\n    }\\n\\n    function _msgSender() internal view virtual override(ERC2771Context, Context) returns (address sender) {\\n        return ERC2771Context._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(ERC2771Context, Context) returns (bytes calldata) {\\n        return ERC2771Context._msgData();\\n    }\\n\\n    /**\\n     * @dev Returns true if gateway token owner transfers reestricted, and false otherwise.\\n     */\\n    function transfersRestricted() public view virtual returns (bool) {\\n        return isTransfersRestricted;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165, AccessControl) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n    * @dev Triggers to check total amount of gateway tokens hold by specific address. \\n    * @param owner Token owner address\\n    */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ZERO ADDRESS\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n    * @dev Triggers to get owner for specific gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ZERO ADDRESS\\\");\\n        return owner;\\n    }\\n\\n    /**\\n    * @dev Triggers to get identity attached to specific gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function getIdentity(uint256 tokenId) public view virtual returns (string memory) {\\n        return tokenURI(tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to get tokenURI attached to specificied `tokenId`\\n    * @param tokenId Gateway token id\\n    */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"TOKEN DOESN'T EXIST OR FREEZED\\\");\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n\\n        return _tokenURI;\\n    }\\n\\n    /**\\n    * @dev Triggers to attach identity string to specific gateway token\\n    * @param tokenId Gateway token id\\n    * @param tokenURI Gateway token identity in a form of TokenURI\\n    *\\n    * @notice Only executable by gatekeepers\\n    */\\n    function setTokenURI(uint256 tokenId, string memory tokenURI) public virtual {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        require(_existsAndActive(tokenId), \\\"TOKEN DOESN'T EXIST OR FREEZED\\\");\\n        address tokenOwner = ownerOf(tokenId);\\n        require(!_isBlacklisted(tokenOwner), \\\"BLACKLISTED USER\\\");\\n\\n        _tokenURIs[tokenId] = tokenURI;\\n    }\\n\\n    /**\\n    * @dev Triggered by external contract to verify if `tokenId` and token `owner` are correct.\\n    *\\n    * Checks if token exists in gateway token contract, `tokenId` still active, and not expired.\\n    * Performs additional checks to verify that `owner` is not blacklisted globally.\\n    */\\n    function verifyToken(address owner, uint256 tokenId) external view virtual returns (bool) {\\n        if(!_existsAndActive(tokenId)) return false;\\n        address tokenOwner = ownerOf(tokenId);\\n        if (tokenOwner != owner) return false;\\n        bool _blacklisted = _isBlacklisted(owner);\\n        if(_blacklisted) return false;\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Triggered by external contract to verify the validity of the default token for `owner`.\\n    *\\n    * Checks owner has any token on gateway token contract, `tokenId` still active, and not expired.\\n    * Performs additional checks to verify that `owner` is not blacklisted globally.\\n    */\\n    function verifyToken(address owner) external view virtual returns (bool) {\\n        uint256 tokenId = getTokenId(owner);\\n        if(!_existsAndActive(tokenId)) return false;\\n        address tokenOwner = ownerOf(tokenId);\\n        if (tokenOwner != owner) return false;\\n        bool _blacklisted = _isBlacklisted(owner);\\n        if(_blacklisted) return false;\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Triggers to get all information gateway token related to specified `tokenId`\\n    * @param tokenId Gateway token id\\n    */\\n    function getToken(uint256 tokenId) public view virtual override\\n        returns (\\n            address owner,\\n            bool isFreezed,\\n            string memory identity,\\n            uint256 expiration\\n        ) \\n    {\\n        owner = ownerOf(tokenId);\\n        isFreezed = _isFreezed[tokenId];\\n        identity = _tokenURIs[tokenId];\\n        expiration = _expirations[tokenId];\\n\\n        return (owner, isFreezed, identity, expiration);\\n    }\\n\\n    /**\\n    * @dev Returns whether `tokenId` exists.\\n    *\\n    * Tokens start existing when they are minted (`_mint`),\\n    * pause when they are freezed (`_freeze`), and \\n    * stop existing when they are burned (`_burn`).\\n    */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n    * @dev Returns whether `tokenId` exists and not freezed.\\n    */\\n    function _existsAndActive(uint256 tokenId) internal view virtual returns (bool) {\\n        if (_expirations[tokenId] != 0) {\\n            return _owners[tokenId] != address(0) && !_isFreezed[tokenId] && block.timestamp <= _expirations[tokenId];\\n        } else {\\n            return _owners[tokenId] != address(0) && !_isFreezed[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ownerOf(tokenId);\\n        if (spender == owner) {\\n            return !transfersRestricted();\\n        } else {\\n            return (getApproved(tokenId) == spender || isApprovedForAll(owner, spender) || hasRole(GATEKEEPER_ROLE, spender));\\n        }\\n    }\\n\\n    /**\\n    * @dev Triggers to request token ownership transfer\\n    * @param to Address to transfer token ownership\\n    * @param tokenId Gateway token id\\n    *\\n    * @notice Only executable by token owner\\n    */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = GatewayToken.ownerOf(tokenId);\\n        require(to != owner, \\\"INCORRECT APPROVE DESTINATION\\\");\\n        require(_msgSender() == owner, \\\"INCORRECT OWNER\\\");\\n        require(!_isBlacklisted(owner), \\\"BLACKLISTED USER\\\");\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_existsAndActive(tokenId), \\\"TOKEN DOESN'T EXIST\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"INCORRECT APPROVE\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"MSG.SENDER NOT OWNER NOR GATEKEEPER\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"MSG.SENDER NOT OWNER NOR GATEKEEPER\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"TRANSFER TO NON ERC721Receiver IMPLEMENTER\\\");\\n    }\\n\\n    /**\\n    * @dev Triggers to burn gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to mint gateway token\\n    * @param to Gateway token owner\\n    * @param tokenId Gateway token id\\n    */\\n    function mint(address to, uint256 tokenId) public virtual onlyNonBlacklistedUser(to) {\\n        //solhint-disable-next-line max-line-length\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n\\n        _mint(to, tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to mint gateway token with specified expiration `timestamp`\\n    * @param to Gateway token owner\\n    * @param tokenId Gateway token id\\n    * @param timestamp Expiration timestamp\\n    */\\n    function mintWithExpiration(address to, uint256 tokenId, uint256 timestamp) public virtual override onlyNonBlacklistedUser(to) {\\n        //solhint-disable-next-line max-line-length\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n\\n        _mint(to, tokenId);\\n        _expirations[tokenId] = timestamp;\\n    }\\n\\n    /**\\n    * @dev Triggers to freeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function freeze(uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        address tokenOwner = ownerOf(tokenId);\\n        require(!_isBlacklisted(tokenOwner), \\\"BLACKLISTED USER\\\");\\n\\n        _freeze(tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to unfreeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function unfreeze(uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        address tokenOwner = ownerOf(tokenId);\\n        require(!_isBlacklisted(tokenOwner), \\\"BLACKLISTED USER\\\");\\n\\n        _unfreeze(tokenId);\\n    }\\n\\n\\n    /**\\n    * @dev Triggers to get specificied `tokenId` expiration timestamp\\n    * @param tokenId Gateway token id\\n    */\\n    function expiration(uint256 tokenId) public view virtual override returns (uint256) {\\n        require(_exists(tokenId), \\\"TOKEN DOESN'T EXIST OR FREEZED\\\");\\n        uint256 _expiration = _expirations[tokenId];\\n\\n        return _expiration;\\n    }\\n\\n    /**\\n    * @dev Triggers to set expiration for tokenId\\n    * @param tokenId Gateway token id\\n    */\\n    function setExpiration(uint256 tokenId, uint256 timestamp) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        address tokenOwner = ownerOf(tokenId);\\n        require(!_isBlacklisted(tokenOwner), \\\"BLACKLISTED USER\\\");\\n\\n        _setExpiration(tokenId, timestamp);\\n    }\\n\\n    /**\\n    * @dev Triggers to get default gateway token ID for `owner`\\n    * @param owner Token owner address\\n    */\\n    function getTokenId(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ZERO ADDRESS\\\");\\n        return _defaultTokens[owner];\\n    }\\n\\n    /**\\n    * @dev Triggers to set token with specified `tokenId` as default for `owner`\\n    * @param owner  Token owner address\\n    * @param tokenId Gateway token id\\n    */\\n    function setDefaultTokenId(address owner, uint256 tokenId) public virtual override {\\n        require(_exists(tokenId), \\\"TOKEN DOESN'T EXIST OR FREEZED\\\");\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n\\n        address actualOwner = ownerOf(tokenId);\\n        require(actualOwner == owner, \\\"INCORRECT OWNER\\\");\\n\\n        _defaultTokens[owner] = tokenId;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ZERO ADDRESS\\\");\\n        require(!_exists(tokenId), \\\"TOKEN ALREADY EXISTS\\\");\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n        if (_defaultTokens[to] == 0) {\\n            _defaultTokens[to] = tokenId;\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = GatewayToken.ownerOf(tokenId);\\n\\n        // Clear all state associated with `tokenId`\\n        _approve(address(0), tokenId);\\n        delete _isFreezed[tokenId];\\n        delete _expirations[tokenId];\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        if (_defaultTokens[owner] == tokenId) {\\n            delete _defaultTokens[owner];\\n        }\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n    * @dev Freezes `tokenId` and it's usage by gateway token owner.\\n    *\\n    * Emits a {Freeze} event.\\n    */\\n    function _freeze(uint256 tokenId) internal virtual {\\n        require(_existsAndActive(tokenId), \\\"TOKEN DOESN'T EXISTS OR NOT ACTIVE\\\");\\n\\n        _isFreezed[tokenId] = true;\\n\\n        emit Freeze(tokenId);\\n    }\\n\\n    /**\\n    * @dev Unfreezes `tokenId` and it's usage by gateway token owner.\\n    *\\n    * Emits a {Unfreeze} event.\\n    */\\n    function _unfreeze(uint256 tokenId) internal virtual {\\n        require(_exists(tokenId), \\\"TOKEN DOESN'T EXISTS\\\");\\n        require(_isFreezed[tokenId], \\\"TOKEN NOT FREEZED\\\");\\n\\n        _isFreezed[tokenId] = false;\\n\\n        emit Unfreeze(tokenId);\\n    }\\n\\n    /**\\n    * @dev Sets expiration time for `tokenId`.\\n    */\\n    function _setExpiration(uint256 tokenId, uint256 timestamp) internal virtual {\\n        require(_existsAndActive(tokenId), \\\"TOKEN DOESN'T EXISTS OR ACTIVE\\\");\\n\\n        _expirations[tokenId] = timestamp;\\n        emit Expiration(tokenId, timestamp);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ownerOf(tokenId) == from, \\\"INCORRECT TOKEN OWNER\\\");\\n        require(to != address(0), \\\"TRANSFER TO ZERO ADDRESS\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        if (_defaultTokens[from] == tokenId) {\\n            delete _defaultTokens[from];\\n            _defaultTokens[to] = tokenId;\\n        }\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(GatewayToken.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function _isBlacklisted(address user) private view returns (bool) {\\n        return IGatewayTokenController(controller).isBlacklisted(user);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    // ===========  ACCESS CONTROLL SECTION ============\\n\\n    /**\\n    * @dev Triggers to add new gatekeeper into the system. \\n    * @param gatekeeper Gatekeeper address\\n    */\\n    function addGatekeeper(address gatekeeper) public virtual {\\n        grantRole(GATEKEEPER_ROLE, gatekeeper);\\n    }\\n\\n    /**\\n    * @dev Triggers to remove existing gatekeeper from gateway token. \\n    * @param gatekeeper Gatekeeper address\\n    */\\n    function removeGatekeeper(address gatekeeper) public virtual {\\n        revokeRole(GATEKEEPER_ROLE, gatekeeper);\\n    }\\n\\n    /**\\n    * @dev Triggers to add new network authority into the system. \\n    * @param authority Network Authority address\\n    *\\n    * @notice Can be triggered by Gateway Token Controller or any Network Authority\\n    */\\n    function addNetworkAuthority(address authority) external virtual override {\\n        grantRole(NETWORK_AUTHORITY_ROLE, authority);\\n    }\\n\\n    /**\\n    * @dev Triggers to remove existing network authority from gateway token. \\n    * @param authority Network Authority address\\n    *\\n    * @notice Can be triggered by Gateway Token Controller or any Network Authority\\n    */\\n    function removeNetworkAuthority(address authority) external virtual override {\\n        revokeRole(NETWORK_AUTHORITY_ROLE, authority);\\n    }\\n\\n    /**\\n    * @dev Triggers to verify if authority has a NETWORK_AUTHORITY_ROLE role. \\n    * @param authority Network Authority address\\n    */\\n    function isNetworkAuthority(address authority) external virtual override returns (bool) {\\n        return hasRole(NETWORK_AUTHORITY_ROLE, authority);\\n    }\\n\\n    // ===========  ACCESS CONTROLL SECTION ============\\n\\n    /**\\n    * @dev Triggers to allow token transfers by token owners. \\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function allowTransfers() external virtual override whenTransfersRestricted onlyIdentityAdmin returns (bool) {\\n        isTransfersRestricted = false;\\n        emit TransfersAccepted(_msgSender());\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Triggers to stop token transfers by token owners. \\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function stopTransfers() external virtual override whenTransfersNotRestricted onlyIdentityAdmin returns (bool) {\\n        isTransfersRestricted = true;\\n        emit TransfersRestricted(_msgSender());\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Transfers Gateway Token DAO Manager access from daoManager to `newManager`\\n    * @param newManager Address to transfer DAO Manager role for.\\n    */\\n    function transferDAOManager(address newManager) public override {\\n        require(msg.sender == daoManager, \\\"NOT DAO MANAGER\\\");\\n        require(newManager != address(0), \\\"ZERO ADDRESS\\\");\\n\\n        grantRole(DAO_MANAGER_ROLE, newManager);\\n        grantRole(NETWORK_AUTHORITY_ROLE, newManager);\\n        grantRole(GATEKEEPER_ROLE, newManager);\\n\\n        revokeRole(GATEKEEPER_ROLE, daoManager);\\n        revokeRole(NETWORK_AUTHORITY_ROLE, daoManager);\\n        revokeRole(DAO_MANAGER_ROLE, daoManager);\\n\\n        daoManager = newManager;\\n\\n        emit DAOManagerTransfered(msg.sender, newManager);\\n    }\\n}\",\"keccak256\":\"0xde864ce4c19a8fc4ef804c73fd1c83da7b47df8918341317d154ad3351572bff\",\"license\":\"MIT\"},\"contracts/GatewayTokenController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./GatewayToken.sol\\\";\\nimport \\\"./interfaces/IGatewayToken.sol\\\";\\nimport \\\"./interfaces/IGatewayTokenController.sol\\\";\\n\\n/**\\n * @dev Gateway Token Controller contract is responsible for managing Identity.com KYC gateway token set of smart contracts\\n *\\n * Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body) \\n * Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add\\n * new Network Authorities\\n */\\ncontract GatewayTokenController is IGatewayTokenController {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet private gatewayTokens;\\n    address public override identityAdmin;\\n\\n    // Mapping from user address to blacklisted boolean\\n    mapping(address => bool) private _isBlacklisted;\\n\\n    // @dev Modifier to prevent calls from anyone except Identity.com Admin\\n    modifier onlyAdmin() {\\n        require(identityAdmin == msg.sender, \\\"NOT IDENTITY_COM_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Gateway Token Controller contract constructor. \\n    * Grants admin role to contract deployer\\n    */\\n    constructor() public {\\n        identityAdmin = msg.sender;\\n    }\\n\\n    // ===========  ADMIN CONTROLL SECTION ============\\n\\n    /**\\n    * @dev Transfers Gateway Token system admin access in case Identity.com changes the main management address\\n    * @param newAdmin Address to transfer admin role for.\\n    */\\n    function transferAdmin(address newAdmin) public onlyAdmin override {\\n        identityAdmin = newAdmin;\\n\\n        emit AdminTransfered(msg.sender, newAdmin);\\n    }\\n\\n    // ===========  TOKEN MANAGEMENT SECTION ============\\n\\n    /**\\n    * @dev Accepts owner's transfers for specified gateway tokens\\n    * @param tokens Gateway Token contracts address array\\n    */\\n    function acceptTransfersBatch(address[] memory tokens) public onlyAdmin override {\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            address token = tokens[i];\\n            require(gatewayTokens.contains(token), \\\"NOT GATEWAY TOKEN\\\");\\n            IGatewayToken gt = IGatewayToken(token);\\n\\n            require(gt.allowTransfers(), \\\"TRANSFERS NOT ALLOWED\\\");\\n        }\\n\\n        emit TransfersAcceptedBatch(tokens, msg.sender);\\n    }\\n\\n    /**\\n    * @dev Restricts owner's transfers for specified gateway tokens\\n    * @param tokens Gateway Token contracts address array\\n    */\\n    function restrictTransfersBatch(address[] memory tokens) public onlyAdmin override {\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            address token = tokens[i];\\n            require(gatewayTokens.contains(token), \\\"NOT GATEWAY TOKEN\\\");\\n            IGatewayToken gt = IGatewayToken(token);\\n\\n            require(gt.stopTransfers(), \\\"TRANSFERS NOT ALLOWED\\\");\\n        }\\n\\n        emit TransfersRestrictedBatch(tokens, msg.sender);\\n    }\\n\\n    // ===========  USER RESTRICTIONS SECTION ============\\n\\n    /**\\n    * @dev Blacklists specified `user` completely, user can't get KYC verification on any gateway token networks.\\n    * @param user Address to blacklist.\\n    *\\n    * @notice Once user is blacklisted there is no way to whitelist, please use this function carefully.\\n    */\\n    function blacklist(address user) public onlyAdmin override {\\n        require(user != address(0), \\\"ZERO ADDRESS\\\");\\n        _isBlacklisted[user] = true;\\n\\n        emit Blacklisted(user);\\n    }\\n\\n    /**\\n    * @dev Blacklist multiple `users`, user can't get KYC verification on any gateway token networks.\\n    * @param users User addresses to blacklist.\\n    *\\n    * @notice Once user is blacklisted there is no way to whitelist, please use this function carefully.\\n    */\\n    function blacklistBatch(address[] memory users) public onlyAdmin override {\\n        for (uint256 i = 0; i < users.length; ++i) {\\n            address _user = users[i];\\n    \\n            require(_user != address(0), \\\"ZERO ADDRESS\\\");\\n            _isBlacklisted[_user] = true;\\n        }\\n\\n        emit BlacklistedBatch(users);\\n    }\\n\\n    /**\\n    * @dev Checks if specified `user` blacklisted completely. \\n    * If user blacklisted gateway token clients not able to verify identity, \\n    * and gatekeepers have to burn tokens owned by blacklisted users.\\n    *\\n    * @param user Address to check.\\n    */\\n    function isBlacklisted(address user) public view override returns (bool) {\\n        return _isBlacklisted[user];\\n    }\\n\\n    // ===========  GATEWAY TOKEN FACTORY SECTION ============\\n\\n    /**\\n    * @dev Deploys new Gateway Token and save address at gatewayTokens address set.\\n    * @param _name Gateway Token name\\n    * @param _symbol Gateway Token symbol\\n    */\\n    function createGatekeeperNetwork(string memory _name, string memory _symbol, bool _isDAOGoverned, address _daoExecutor, address trustedForwarder) public override returns (address tokenAddress) {\\n        tokenAddress = address(new GatewayToken(_name, _symbol, msg.sender, _isDAOGoverned, _daoExecutor, trustedForwarder));\\n        gatewayTokens.add(tokenAddress);\\n\\n        emit GatekeeperNetworkCreated(tokenAddress, _name, _symbol, msg.sender);\\n        return tokenAddress;\\n    }\\n\\n    // ===========  ACCESS CONTROLL SECTION ============\\n\\n    /**\\n    * @dev Triggers to add multiple network authorities in gateway token contract. \\n    * @param token Gateway Token contract address\\n    * @param authorities Network Authorities array\\n    *\\n    * @notice Only triggered by identityAdmin\\n    */\\n    function addNetworkAuthorities(address token, address[] memory authorities) public virtual override {\\n        require(gatewayTokens.contains(token), \\\"NOT GATEWAY TOKEN\\\");\\n        IGatewayToken gt = IGatewayToken(token);\\n\\n        for (uint256 i = 0; i < authorities.length; ++i) {\\n            address authority = authorities[i];\\n\\n            if (gt.isDAOGoverned()) {\\n                address daoManager = gt.daoManager();\\n                require(msg.sender == daoManager, \\\"INCORRECT ACCESS\\\");\\n            } else {\\n                require(gt.isNetworkAuthority(msg.sender), \\\"INCORRECT ACCESS\\\");\\n            }\\n\\n            gt.addNetworkAuthority(authority);\\n        }\\n    }\\n\\n    /**\\n    * @dev Triggers to remove multiple network authorities in gateway token contract. \\n    * @param token Gateway Token contract address\\n    * @param authorities Network Authorities array\\n    *\\n    * @notice Only triggered by identityAdmin\\n    */\\n    function removeNetworkAuthorities(address token, address[] memory authorities) public virtual override {\\n        require(gatewayTokens.contains(token), \\\"NOT GATEWAY TOKEN\\\");\\n        IGatewayToken gt = IGatewayToken(token);\\n\\n        for (uint256 i = 0; i < authorities.length; ++i) {\\n            address authority = authorities[i];\\n\\n            if (gt.isDAOGoverned()) {\\n                address daoManager = gt.daoManager();\\n                require(msg.sender == daoManager, \\\"INCORRECT ACCESS\\\");\\n            } else {\\n                require(gt.isNetworkAuthority(msg.sender), \\\"INCORRECT ACCESS\\\");\\n            }\\n\\n            gt.removeNetworkAuthority(authority);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbac49befe27e473415be63eb5b5c86fdab77415c6527a8abe491491485a3383d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Expirable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Expirable {\\n    /**\\n    * @dev Emitted when expiration set to `tokenId`\\n    */\\n    event Expiration(uint256 indexed tokenId, uint256 timestamp);\\n\\n    /**\\n    * @dev Triggers to mint gateway token with specified expiration `timestamp`\\n    * @param to Gateway token owner\\n    * @param tokenId Gateway token id\\n    * @param timestamp Expiration timestamp\\n    */\\n    function mintWithExpiration(address to, uint256 tokenId, uint256 timestamp) external;\\n\\n    /**\\n    * @dev Triggers to freeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function expiration(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n    * @dev Triggers to unfreeze gateway token\\n    * @param tokenId Gateway token id\\n    * @param tokenId Expiration timestamp\\n    */\\n    function setExpiration(uint256 tokenId, uint256 timestamp) external;\\n}\",\"keccak256\":\"0x39cad55555f5553cc63e0188e95401f9bed5cb74ebe80d37da8b679b40277359\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Freezeble.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Freezeble {\\n    /**\\n    * @dev Emitted when token freezed by gatekeeper\\n    */\\n    event Freeze(uint256 indexed tokenId);\\n\\n    /**\\n    * @dev Emitted when token unfreezed by gatekeeper\\n    */\\n    event Unfreeze(uint256 indexed tokenId);\\n\\n    /**\\n    * @dev Triggers to freeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function freeze(uint256 tokenId) external;\\n\\n    /**\\n    * @dev Triggers to unfreeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function unfreeze(uint256 tokenId) external;\\n}\",\"keccak256\":\"0x2dfb4fa07d16024f1d8bc6ca95958ef3330573ebccc1ca3190e46ab711ca1378\",\"license\":\"MIT\"},\"contracts/interfaces/IGatewayToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGatewayToken {\\n    /**\\n    * @dev Emitted when GatewayToken allowed to transfer for token owners by `account`.\\n    */\\n    event TransfersAccepted(address account);\\n\\n    /**\\n    * @dev Emitted when GatewayToken restricted to transfer for token owners by `account`.\\n    */\\n    event TransfersRestricted(address account);\\n\\n    /**\\n    * @dev Emitted when GatewayToken DAO Manager transfered to `newDAOManager` address.\\n    */\\n    event DAOManagerTransfered(address previousDAOManager, address newDAOManager);\\n\\n    /**\\n    * @dev Triggers to get all information relating to gateway `tokenId`\\n    * @param tokenId Gateway token id\\n    */\\n    function getToken(uint256 tokenId) \\n        external \\n        view  \\n        returns (\\n            address owner,\\n            bool isFreezed,\\n            string memory identity,\\n            uint256 expiration\\n        );\\n\\n    /**\\n    * @dev Triggers to get default gateway token ID for `owner`\\n    * @param owner Token owner address\\n    */\\n    function getTokenId(address owner) external returns (uint256);\\n\\n    /**\\n    * @dev Triggers to set token with specified `tokenId` as default for `owner`\\n    * @param owner  Token owner address\\n    * @param tokenId Gateway token id\\n    */\\n    function setDefaultTokenId(address owner, uint256 tokenId) external;\\n\\n    /**\\n    * @dev Triggers to add new network authority into the system. \\n    * @param authority Network Authority address\\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function addNetworkAuthority(address authority) external;\\n\\n    /**\\n    * @dev Triggers to remove existing network authority from gateway token. \\n    * @param authority Network Authority address\\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function removeNetworkAuthority(address authority) external;\\n\\n    /**\\n    * @dev Triggers to verify if authority has a NETWORK_AUTHORITY_ROLE role. \\n    * @param authority Network Authority address\\n    */\\n    function isNetworkAuthority(address authority) external returns (bool);\\n\\n    /**\\n    * @dev Triggers to allow token transfers by token owners. \\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function allowTransfers() external returns (bool);\\n\\n    /**\\n    * @dev Triggers to stop token transfers by token owners. \\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function stopTransfers() external returns (bool);\\n\\n    /**\\n    * @dev Triggers to check if token governed by DAO. \\n    */\\n    function isDAOGoverned() external returns (bool);\\n\\n    /**\\n    * @dev Triggers to get DAO Manager address. \\n    */\\n    function daoManager() external returns (address);\\n\\n    /**\\n    * @dev Transfers Gateway Token DAO Manager access from daoManager to `newManager`\\n    * @param newManager Address to transfer DAO Manager role for.\\n    */\\n    function transferDAOManager(address newManager) external;\\n}\",\"keccak256\":\"0x1f70e1ea5c98364a738803749c3711338651c23d9f6e120f665fbfc6833c0e9e\",\"license\":\"MIT\"},\"contracts/interfaces/IGatewayTokenController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGatewayTokenController {\\n    /**\\n    * @dev Emitted when Identity.com Admin transfered from `previousAdmin` to `admin`.\\n    */\\n    event AdminTransfered(address indexed previousAdmin, address indexed admin);\\n\\n    /**\\n    * @dev Emitted when new GatewayToken contract deployed with \\n    * associated `name` and `symbol` to specific `address`.\\n    */\\n    event GatekeeperNetworkCreated(address indexed tokenAddress, string name, string symbol, address deployer);\\n\\n    /**\\n    * @dev Emitted when GatewayTokens allowed to transfer for token owners by `account`.\\n    */\\n    event TransfersAcceptedBatch(address[] tokens, address account);\\n\\n    /**\\n    * @dev Emitted when GatewayTokens restricted to transfer for token owners by `account`.\\n    */\\n    event TransfersRestrictedBatch(address[] tokens, address account);\\n\\n    /**\\n    * @dev Emitted when `user` address is blocked to own tokens in any GatewayToken contract.\\n    */\\n    event Blacklisted(address indexed user);\\n\\n    /**\\n    * @dev Emitted when multiple `users` addresses is blocked to own tokens in any GatewayToken contract.\\n    */\\n    event BlacklistedBatch(address[] users);\\n\\n    /**\\n    * @dev Triggers to get Identity.com System Admin\\n    */\\n    function identityAdmin() external view returns (address);\\n\\n    /**\\n    * @dev Transfers Gateway Token system admin access in case Identity.com changes the main management address\\n    * @param newAdmin Address to transfer admin role for.\\n    */\\n    function transferAdmin(address newAdmin) external;\\n\\n    /**\\n    * @dev Accepts owner's transfers for specified gateway tokens\\n    * @param tokens Gateway Token contracts address array\\n    */\\n    function acceptTransfersBatch(address[] memory tokens) external;\\n\\n    /**\\n    * @dev Restricts owner's transfers for specified gateway tokens\\n    * @param tokens Gateway Token contracts address array\\n    */\\n    function restrictTransfersBatch(address[] memory tokens) external;\\n\\n    /**\\n    * @dev Blacklists specified `user` completely, user can't get KYC verification on any gateway token networks.\\n    * @param user Address to blacklist.\\n    *\\n    * @notice Once user is blacklisted there is no way to whitelist, please use this function carefully.\\n    */\\n    function blacklist(address user) external;\\n\\n    /**\\n    * @dev Blacklist multiple `users`, user can't get KYC verification on any gateway token networks.\\n    * @param users User addresses to blacklist.\\n    *\\n    * @notice Once user is blacklisted there is no way to whitelist, please use this function carefully.\\n    */\\n    function blacklistBatch(address[] memory users) external;\\n\\n    /**\\n    * @dev Checks if specified `user` blacklisted completely. \\n    * If user blacklisted gateway token clients not able to verify identity, \\n    * and gatekeepers have to burn tokens owned by blacklisted users.\\n    *\\n    * @param user Address to check.\\n    */\\n    function isBlacklisted(address user) external view returns (bool);\\n\\n    /**\\n    * @dev Deploys new Gateway Token and save address at gatewayTokens address set.\\n    * @param _name Gateway Token name\\n    * @param _symbol Gateway Token symbol\\n    */\\n    function createGatekeeperNetwork(string memory _name, string memory _symbol, bool _isDAOGoverned, address _daoExecutor, address trustedForwarder) external returns (address tokenAddress);\\n\\n    /**\\n    * @dev Triggers to add multiple network authorities in gateway token contract. \\n    * @param token Gateway Token contract address\\n    * @param authorities Network Authorities array\\n    *\\n    * @notice Only triggered by identityAdmin\\n    */\\n    function addNetworkAuthorities(address token, address[] memory authorities) external;\\n\\n    /**\\n    * @dev Triggers to remove multiple network authorities in gateway token contract. \\n    * @param token Gateway Token contract address\\n    * @param authorities Network Authorities array\\n    *\\n    * @notice Only triggered by identityAdmin\\n    */\\n    function removeNetworkAuthorities(address token, address[] memory authorities) external;\\n}\",\"keccak256\":\"0xa26c4e8694302a066b46dadec5c1015477e695accf23bc418f361c75b8127114\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Gateway Token Controller contract is responsible for managing Identity.com KYC gateway token set of smart contracts Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body)  Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add new Network Authorities",
    "kind": "dev",
    "methods": {
      "acceptTransfersBatch(address[])": {
        "details": "Accepts owner's transfers for specified gateway tokens",
        "params": {
          "tokens": "Gateway Token contracts address array"
        }
      },
      "addNetworkAuthorities(address,address[])": {
        "details": "Triggers to add multiple network authorities in gateway token contract. ",
        "params": {
          "authorities": "Network Authorities array",
          "token": "Gateway Token contract address"
        }
      },
      "blacklist(address)": {
        "details": "Blacklists specified `user` completely, user can't get KYC verification on any gateway token networks.",
        "params": {
          "user": "Address to blacklist."
        }
      },
      "blacklistBatch(address[])": {
        "details": "Blacklist multiple `users`, user can't get KYC verification on any gateway token networks.",
        "params": {
          "users": "User addresses to blacklist."
        }
      },
      "constructor": {
        "details": "Gateway Token Controller contract constructor.  Grants admin role to contract deployer"
      },
      "createGatekeeperNetwork(string,string,bool,address,address)": {
        "details": "Deploys new Gateway Token and save address at gatewayTokens address set.",
        "params": {
          "_name": "Gateway Token name",
          "_symbol": "Gateway Token symbol"
        }
      },
      "isBlacklisted(address)": {
        "details": "Checks if specified `user` blacklisted completely.  If user blacklisted gateway token clients not able to verify identity,  and gatekeepers have to burn tokens owned by blacklisted users.",
        "params": {
          "user": "Address to check."
        }
      },
      "removeNetworkAuthorities(address,address[])": {
        "details": "Triggers to remove multiple network authorities in gateway token contract. ",
        "params": {
          "authorities": "Network Authorities array",
          "token": "Gateway Token contract address"
        }
      },
      "restrictTransfersBatch(address[])": {
        "details": "Restricts owner's transfers for specified gateway tokens",
        "params": {
          "tokens": "Gateway Token contracts address array"
        }
      },
      "transferAdmin(address)": {
        "details": "Transfers Gateway Token system admin access in case Identity.com changes the main management address",
        "params": {
          "newAdmin": "Address to transfer admin role for."
        }
      }
    },
    "stateVariables": {
      "identityAdmin": {
        "details": "Triggers to get Identity.com System Admin"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNetworkAuthorities(address,address[])": {
        "notice": "Only triggered by identityAdmin"
      },
      "blacklist(address)": {
        "notice": "Once user is blacklisted there is no way to whitelist, please use this function carefully."
      },
      "blacklistBatch(address[])": {
        "notice": "Once user is blacklisted there is no way to whitelist, please use this function carefully."
      },
      "removeNetworkAuthorities(address,address[])": {
        "notice": "Only triggered by identityAdmin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3634,
        "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
        "label": "gatewayTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)1487_storage"
      },
      {
        "astId": 3637,
        "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
        "label": "identityAdmin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3641,
        "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
        "label": "_isBlacklisted",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1487_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1486,
            "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1186_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1186_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1181,
            "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1185,
            "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}